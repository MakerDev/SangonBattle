@inject IJSRuntime _jsRuntime

<div id="@_carouselId" class="carousel slide" data-ride="carousel">
    @if (DisplayIndicators)
    {
        <ol class="carousel-indicators" style="margin-bottom: 10px;">
            <li data-target="@($"#{_carouselId}")" data-slide-to="0" class="active"></li>

            @for (int i = 1; i < ContentPictures.Count; i++)
            {
                <li data-target="@($"#{_carouselId}")" data-slide-to="@i"></li>
            }
        </ol>
    }

    <div class="row align-content-center">
        <div class="carousel-inner carousel-wrapper">
            @for (int i = 0; i < ContentPictures.Count; i++)
            {
                @if (i == 0)
                {
                    <div class="carousel-item active">
                        <img src="@ContentPictures[i]" alt="...">
                    </div>
                }
                else
                {
                    <div class="carousel-item">
                        <img src="@ContentPictures[i]" alt="...">
                    </div>
                }
            }
        </div>

        @if (DisplayArrows)
        {
            <a class="carousel-control-prev" href="@($"#{_carouselId}")" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="@($"#{_carouselId}")" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        }
    </div>
</div>

@code {
    [Parameter] public bool DisplayArrows { get; set; } = false;
    [Parameter] public bool DisplayIndicators { get; set; } = true;
    [Parameter] public List<string> ContentPictures { get; set; } = new List<string>();

    public string _carouselId
    {
        get
        {
            //return $"carousel-{DateTime.Now}";
            return "carouselExampleIndicators";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initializeCarousel", _carouselId);
    }
}
