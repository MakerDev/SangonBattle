@page "/survey"
@inject SurveyRepository _serveyRepository
@inject NavigationManager _navigationManager


<div class="container">
    <div class="text-center mb-4">
        <div class="d-flex justify-content-center w-100">
            <p class="col-sm-10 col-md-8"><strong>Survey</strong></p>
        </div>
        <div class="d-flex justify-content-center w-100">
            <p class="col-sm-6 col-md-8">최대한 솔직하게 답변해주세요!</p>
        </div>
        <div class="d-flex justify-content-center w-100">
            <p class="col-12">
                <strong style="color: var(--disagree-bg-color);">No</strong>
                &lt;-----------------&gt;
                <strong style="color: var(--agree-bg-color);">Yes</strong>
            </p>
        </div>
    </div>

    @foreach (var question in _questions)
    {
        <SurveyQuestion Question="question" OnAnswered="OnAnswered" />

        <p class="text-center">------------------------------</p>
    }

    @if (!_allQuestionsAnswered)
    {
        <div class="w-100 text-center">
            <p>
                아직
                @foreach (var notAnsweredQuestionId in _notAnsweredQuestionIds)
                {
                    <span style="color: palevioletred">@((notAnsweredQuestionId+1).ToString()), </span>
                }
                번 질문을 답변하지 않으셨습니다!
            </p>
        </div>
    }

    <div class="mb-5 row justify-content-center">
        <button type="button" class="btn btn-info"
                style="width:20vw; height:8vw; max-width:160px; max-height:64px; font-size: 10px;"
                disabled="@(!_allQuestionsAnswered)"
                @onclick="Submit">
            완료
        </button>
    </div>
</div>


@code {
    private List<Question> _questions = new List<Question>();
    private Dictionary<int, Submission> _submissions = new Dictionary<int, Submission>();
    private List<int> _notAnsweredQuestionIds = new List<int>();
    private bool _allQuestionsAnswered => _notAnsweredQuestionIds.Count == 0;

    protected override async Task OnInitializedAsync()
    {
        _questions = await _serveyRepository.GetQuestions();
        _notAnsweredQuestionIds.AddRange(Enumerable.Range(0, _questions.Count));
    }

    private void OnAnswered(Submission submission)
    {
        if (_submissions.ContainsKey(submission.QuestionId))
        {
            _submissions[submission.QuestionId] = submission;
        }
        else
        {
            _submissions.Add(submission.QuestionId, submission);
        }

        _notAnsweredQuestionIds.Remove(submission.QuestionId);
    }

    private async Task Submit()
    {
        foreach (var key in _submissions.Keys)
        {
            Console.WriteLine($"{key} : {_submissions[key].Point}");
        }

        int resultId = await _serveyRepository.Submit(_submissions.Values.ToList());

        _navigationManager.NavigateTo($"/result/{resultId}");
    }
}
